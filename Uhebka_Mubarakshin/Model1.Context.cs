//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Uhebka_Mubarakshin
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Uhebnia_Praktika_321Entities1 : DbContext
    {
        public Uhebnia_Praktika_321Entities1()
            : base("name=Uhebnia_Praktika_321Entities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Academic> Academic { get; set; }
        public virtual DbSet<Animals_Mubarakshin> Animals_Mubarakshin { get; set; }
        public virtual DbSet<Countries_Mubarakshin> Countries_Mubarakshin { get; set; }
        public virtual DbSet<Disciplina> Disciplina { get; set; }
        public virtual DbSet<Ekzamen> Ekzamen { get; set; }
        public virtual DbSet<Fakultet> Fakultet { get; set; }
        public virtual DbSet<Flowers_Mubarakshin> Flowers_Mubarakshin { get; set; }
        public virtual DbSet<Injener> Injener { get; set; }
        public virtual DbSet<Kafedra> Kafedra { get; set; }
        public virtual DbSet<Management_Mubarakshin> Management_Mubarakshin { get; set; }
        public virtual DbSet<Prepodovatel> Prepodovatel { get; set; }
        public virtual DbSet<Sotrudnik> Sotrudnik { get; set; }
        public virtual DbSet<Specialnost> Specialnost { get; set; }
        public virtual DbSet<Strana> Strana { get; set; }
        public virtual DbSet<Student> Student { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Uhenik> Uhenik { get; set; }
        public virtual DbSet<Zaiavka> Zaiavka { get; set; }
        public virtual DbSet<Zav_kafedra> Zav_kafedra { get; set; }
        public virtual DbSet<Гимназисты> Гимназисты { get; set; }
        public virtual DbSet<Ученики> Ученики { get; set; }
    
        [DbFunction("Uhebnia_Praktika_321Entities1", "Пример10")]
        public virtual IQueryable<Пример10_Result> Пример10()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Пример10_Result>("[Uhebnia_Praktika_321Entities1].[Пример10]()");
        }
    
        [DbFunction("Uhebnia_Praktika_321Entities1", "Пример8")]
        public virtual IQueryable<Пример8_Result> Пример8(Nullable<int> площадь)
        {
            var площадьParameter = площадь.HasValue ?
                new ObjectParameter("Площадь", площадь) :
                new ObjectParameter("Площадь", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Пример8_Result>("[Uhebnia_Praktika_321Entities1].[Пример8](@Площадь)", площадьParameter);
        }
    
        [DbFunction("Uhebnia_Praktika_321Entities1", "Пример9")]
        public virtual IQueryable<Пример9_Result> Пример9(Nullable<long> a, Nullable<long> b)
        {
            var aParameter = a.HasValue ?
                new ObjectParameter("A", a) :
                new ObjectParameter("A", typeof(long));
    
            var bParameter = b.HasValue ?
                new ObjectParameter("B", b) :
                new ObjectParameter("B", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Пример9_Result>("[Uhebnia_Praktika_321Entities1].[Пример9](@A, @B)", aParameter, bParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
